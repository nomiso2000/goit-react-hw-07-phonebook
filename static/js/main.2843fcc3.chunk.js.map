{"version":3,"sources":["Components/ContactList/ContactList.module.css","Components/Notification/Notification.module.css","Components/App/App.module.css","Components/ContactForm/ContactForm.module.css","Components/redux/item/itemTypes.js","Components/redux/item/itemActions.js","Components/redux/item/itemReducer.js","Components/redux/store.js","Components/redux/item/itemOperations.js","Components/redux/item/itemSelector.js","Components/ContactList/ContactList.js","Components/ContactForm/ContactForm.js","Components/App/header.js","Components/Notification/Notification.js","Components/Filter/Filter.js","Components/App/App.js","index.js"],"names":["module","exports","addItemRequest","createAction","addItemSuccess","addItemError","fetchItemRequest","fetchItemSuccess","fetchItemError","removeItemRequest","removeItemSuccess","removeItemError","setFilter","actionTypes","filter","payload","setVisible","itemsReducer","createReducer","itemsActions","state","action","contact","id","itemTypes","toggle","loading","combineReducers","items","defaultMiddle","getDefaultMiddleware","store","configureStore","reducer","middleware","next","addItem","name","number","dispatch","itemActions","axios","post","then","response","data","catch","error","fetchItems","get","removeItem","delete","getContacts","getFilter","getNotific","createSelector","contacts","toLowerCase","includes","mapDispatchToProps","deleteItem","itemOperations","connect","itemSelector","TransitionGroup","component","className","styles","list","map","CSSTransition","key","classNames","timeout","item","button","type","onClick","ContactForm","handleChange","target","setState","value","handleSubmit","e","preventDefault","contains","props","toggleNotification","onAddItem","clearState","array","some","el","this","onSubmit","placeholder","onChange","Component","itemsOperation","itemsAction","Header","Notification","notificationBox","onSetFilter","itemAction","loginInputId","uuidv4","App","console","log","container","in","appear","notific","stylesNotification","unmountOnExit","onEntered","length","React","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2843fcc3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactList_button__3dn5x\",\"list\":\"ContactList_list__29tz5\",\"item\":\"ContactList_item__3x8_r\",\"enter\":\"ContactList_enter__3NVkz\",\"enterActive\":\"ContactList_enterActive__21VLY\",\"exit\":\"ContactList_exit__2spe4\",\"exitActive\":\"ContactList_exitActive__1ZpVL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notificationBox\":\"Notification_notificationBox__76P5P\",\"enter\":\"Notification_enter__bTI1w\",\"enterActive\":\"Notification_enterActive__38Hhp\",\"exit\":\"Notification_exit__3U7a0\",\"exitActive\":\"Notification_exitActive__2z0o9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1SUYd\",\"appear\":\"App_appear__2MKlC\",\"appearActive\":\"App_appearActive__mVoCr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"ContactForm_button__4Wx7Z\"};","const ADD = 'items/add';\r\nconst DELETE = 'items/delete';\r\nconst SETFILTER = 'items/setFilter';\r\nconst TOGGLENOT = 'items/toggle'\r\n\r\nexport default {\r\n    ADD,\r\n    DELETE,\r\n    SETFILTER,\r\n    TOGGLENOT\r\n}","\r\nimport actionTypes from './itemTypes'\r\nimport {createAction} from '@reduxjs/toolkit'\r\n// const addItem = createAction(actionTypes.ADD, (name, number) => ({\r\n//     payload: { items: {\r\n//         id: uuidv4(),\r\n//         name,\r\n//         number\r\n//     },\r\n//     },\r\n// }))\r\n\r\nconst addItemRequest = createAction(\"items/addRequest\")\r\nconst addItemSuccess = createAction(\"items/addSuccess\")\r\nconst addItemError = createAction(\"items/addError\")\r\n\r\nconst fetchItemRequest = createAction(\"items/fetchRequest\")\r\nconst fetchItemSuccess = createAction(\"items/fetchSuccess\")\r\nconst fetchItemError = createAction(\"items/fetchError\")\r\n\r\nconst removeItemRequest = createAction(\"items/removeRequest\")\r\nconst removeItemSuccess = createAction(\"items/removeSuccess\")\r\nconst removeItemError = createAction(\"items/removeError\")\r\n\r\n\r\nconst setFilter = createAction(actionTypes.SETFILTER, filter => ({\r\n    payload: {\r\n        filter,\r\n    },\r\n}));\r\n\r\nconst setVisible = createAction(actionTypes.TOGGLENOT)\r\n\r\nexport default {\r\n    removeItemRequest,\r\n    removeItemSuccess,\r\n    removeItemError,\r\n    addItemRequest,\r\n    addItemSuccess,\r\n    addItemError,\r\n    fetchItemRequest,\r\n    fetchItemSuccess,\r\n    fetchItemError,\r\n    setFilter,\r\n    setVisible\r\n}","\r\nimport {combineReducers} from 'redux';\r\nimport itemTypes from './itemTypes'\r\nimport {createReducer} from '@reduxjs/toolkit'\r\nimport itemsActions from './itemActions'\r\n\r\n\r\n\r\nconst itemsReducer = createReducer([], {\r\n    [itemsActions.fetchItemSuccess]:(state, action) => action.payload,\r\n    [itemsActions.addItemSuccess]:(state, action) => [...state, action.payload],\r\n    [itemsActions.removeItemSuccess]:(state, action) => state.filter((contact) => contact.id !== action.payload)\r\n    // [itemTypes.DELETE]: (state, action) => state.filter((contact) => contact.id !== action.payload.id)\r\n})\r\n\r\nconst filter = createReducer(\"\", {\r\n    [itemTypes.SETFILTER]: (state, action) => action.payload.filter\r\n})\r\n\r\nconst toggle = createReducer( false, {\r\n    [itemTypes.TOGGLENOT]: (state) => !state,\r\n}\r\n)\r\nconst loading = createReducer(false, {\r\n    [itemsActions.fetchItemRequest]: () => true,\r\n    [itemsActions.addItemRequest]: () => true,\r\n    [itemsActions.fetchItemSuccess]: () => false,\r\n    [itemsActions.addItemSuccess]: () => false,\r\n    [itemsActions.fetchItemError]: () => false,\r\n    [itemsActions.addItemError]: () => false,\r\n} )\r\n\r\nexport default combineReducers({\r\n    items: itemsReducer,\r\n    filter,\r\n    toggle,\r\n    loading\r\n})","import {configureStore, getDefaultMiddleware} from '@reduxjs/toolkit'\r\nimport itemsReducer from './item/itemReducer'\r\n\r\nconst defaultMiddle = getDefaultMiddleware()\r\nconst md1 = state => next => action => {\r\n    next (action)\r\n}\r\nconst store = configureStore({\r\n    reducer: {\r\n        items: itemsReducer,\r\n    },\r\n    middleware: [...defaultMiddle, md1 ]\r\n})\r\nexport default store;","import itemActions from \"./itemActions\"\r\nimport axios from 'axios'\r\n\r\n\r\nconst addItem = (name, number) => dispatch => {\r\n    dispatch(itemActions.addItemRequest());\r\n    axios.post('http://localhost:2000/contacts', {name, number})\r\n    .then(response => {\r\n        dispatch(itemActions.addItemSuccess(response.data))\r\n    }).catch(error => dispatch(itemActions.addItemError(error)))\r\n}\r\n\r\n\r\nconst fetchItems = () => dispatch => {\r\n    dispatch(itemActions.fetchItemRequest())\r\n    axios.get('http://localhost:2000/contacts')\r\n    .then(response => dispatch(itemActions.fetchItemSuccess(response.data)))\r\n    .catch(error => dispatch(itemActions.fetchItemError(error)))\r\n\r\n}\r\n\r\nconst removeItem = id => dispatch => {\r\n    dispatch(itemActions.removeItemRequest())\r\n    axios.delete(`http://localhost:2000/contacts/${id}`)\r\n    .then(() => dispatch(itemActions.removeItemSuccess(id)))\r\n    .catch(error => dispatch(itemActions.removeItemError(error)))\r\n}\r\nexport default {\r\n    addItem,\r\n    fetchItems,\r\n    removeItem\r\n}","import { createSelector } from \"@reduxjs/toolkit\"\r\n\r\n\r\nconst getContacts = state => state.items.items\r\nconst getNotific = state => state.items.toggle\r\nconst getFilter = state => state.items.filter\r\n// const  setVisible = state => {\r\n//   const contacts = getContacts(state);\r\n//   const filter = getFilter(state).toLowerCase();\r\n//   return contacts.filter(contact => contact.name.toLowerCase().includes(filter))\r\n\r\n// }\r\nconst setVisible = createSelector(\r\n    [getContacts, getFilter],\r\n     (contacts, filter ) => {\r\n    return contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()))\r\n})\r\nexport default {\r\n    getContacts,\r\n    getNotific,\r\n    getFilter,\r\n    setVisible\r\n}","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\r\nimport itemOperations from '../redux/item/itemOperations'\r\nimport itemSelector from '../redux/item/itemSelector'\r\nimport styles from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ items, deleteItem }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className={styles.list} >\r\n        {items && items.map(({ name, id, number }) => {\r\n          return (\r\n            <CSSTransition key={id}  classNames={styles} timeout={250}    > \r\n          <li className={styles.item}>\r\n            <span>\r\n              {name} {number}\r\n            </span>\r\n            <button\r\n              className={styles.button}\r\n              type=\"button\"\r\n              onClick={() => deleteItem(id)}\r\n  \r\n            >\r\n              Delete\r\n            </button>\r\n          </li>\r\n          </CSSTransition>\r\n\r\n          );\r\n        })}\r\n      </TransitionGroup>\r\n    \r\n  );\r\n};\r\nContactList.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string.isRequired,\r\n      id: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n  deleteItem: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return   {  items: itemSelector.setVisible(state)}\r\n}\r\n\r\n  const mapDispatchToProps = {\r\n    deleteItem: itemOperations.removeItem\r\n  }\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\nimport itemsOperation from '../redux/item/itemOperations'\r\nimport itemsAction from '../redux/item/itemActions'\r\nimport itemSelector from '../redux/item/itemSelector'\r\nimport styles from \"./ContactForm.module.css\";\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    onAddItem: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = ({ target }) => {\r\n    this.setState({\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n contains(array, value) {\r\n   return array.some( el => el.name.toLowerCase() === value.toLowerCase()\r\n   );\r\n }\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    \r\n       if( this.contains(this.props.contacts, this.state.name)) {\r\n        this.props.toggleNotification()\r\n       } else if( this.state.name && this.state.number) {\r\n       this.props.onAddItem(this.state.name, this.state.number )\r\n       }\r\n     \r\n    this.clearState();\r\n  };\r\n\r\n  clearState = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    \r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    \r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          placeholder=\"Enter your name...\"\r\n          onChange={this.handleChange}\r\n          value={name}\r\n        />\r\n        <input\r\n          type=\"text\"\r\n          name=\"number\"\r\n          placeholder=\"Enter your number...\"\r\n          onChange={this.handleChange}\r\n          value={number}\r\n        />\r\n        <button type=\"submit\" className={styles.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: itemSelector.getContacts(state)\r\n  }\r\n}\r\nconst mapDispatchToProps = {\r\n  onAddItem: itemsOperation.addItem ,\r\n  toggleNotification: itemsAction.setVisible\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps )(ContactForm);\r\n","import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return <h1>Phonebook</h1>;\r\n};\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport styles from './Notification.module.css';\r\n\r\nconst Notification = () => {\r\n  return <div className={styles.notificationBox}>Contact already exist!</div>;\r\n};\r\n\r\nexport default Notification;","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport {connect} from 'react-redux'\r\nimport itemAction from '../redux/item/itemActions'\r\nimport itemSelector from '../redux/item/itemSelector'\r\n\r\nconst Filter = ({ onSetFilter, value }) => {\r\n  const loginInputId = uuidv4();\r\n  return (\r\n    <div>\r\n      <h3>Find contact by name</h3>\r\n      <input\r\n        onChange={e => onSetFilter(e.target.value)}\r\n        value={value}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        id={loginInputId}\r\n        placeholder=\"Enter a name to search...\"\r\n      />\r\n    </div>\r\n  );\r\n};\r\nFilter.propTypes = {\r\n  onSetFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = state => (\r\n  {\r\n    value: itemSelector.getFilter(state)\r\n  }\r\n);\r\nconst mapDispatchToProps = {\r\n  onSetFilter: itemAction.setFilter\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\nimport ContactList from \"../ContactList/ContactList\";\nimport ContactForm from \"../ContactForm/ContactForm\";\nimport Header from \"./header\";\nimport itemsAction from '../redux/item/itemActions'\nimport { CSSTransition } from \"react-transition-group\";\nimport {connect} from 'react-redux'\nimport Notification from '../Notification/Notification'\nimport itemOperations from '../redux/item/itemOperations'\nimport itemSelector from '../redux/item/itemSelector'\nimport stylesNotification from '../Notification/Notification.module.css'\nimport Filter from \"../Filter/Filter\";\nimport styles from \"./App.module.css\";\n\nclass App extends React.Component  {\n\n  componentDidMount () {\n    this.props.fetchItems()\n  }\n\n  render () {\n    console.log(this.props)\n    return (\n      <div className={styles.container}>\n         <CSSTransition\n          in={true}\n          classNames={styles}\n          timeout={500}\n          appear={true}\n        >         \n         <Header />\n         </CSSTransition>\n          <CSSTransition \n           in={this.props.notific}\n           timeout={1000} \n           classNames={stylesNotification}  \n           unmountOnExit\n           onEntered={() => this.props.toggleNotification()}  \n            > \n            <Notification/></CSSTransition>\n          <ContactForm  />\n          {this.props.contacts.length > 1 &&     \n        <> \n          <h2>Contacts</h2>\n          <Filter />\n        </> }\n        <ContactList  />\n      </div>\n    );\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    notific: itemSelector.getNotific(state),\n    contacts: itemSelector.getContacts(state)\n  }\n}\nconst mapDispatchToProps = {\n  toggleNotification: itemsAction.setVisible,\n  fetchItems: itemOperations.fetchItems\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport {Provider} from 'react-redux'\nimport store from './Components/redux/store'\nimport App from \"./Components/App/App\";\n\nReactDOM.render( <Provider store={store}><App /></Provider>, document.getElementById(\"root\"));\n"],"sourceRoot":""}